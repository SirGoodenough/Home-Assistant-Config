cube_dimmer_control:
  description: Template Dimmer Control
  fields:
    angle:
      name: Angle to represent new brightness
      description:
        This is the new angle to be used in the calculation for Brightness
      required: true
      example: "-120.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    light:
      name: Light entity to control
      description: Add the light entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
          domain: light
  sequence:
    - service: light.turn_on
      data:
        entity_id: "{{ light }}"
        brightness_pct: >-
          {% set step_size = angle * 0.4 %}
          {# Get brightness as a percent. #}
          {% set cb = (state_attr( light, 'brightness') | float(10) / 255.0) * 100.0 %}
          {% set new_brightness = cb | int(10) + step_size %}
          {% if new_brightness < 5 %}
            {# If it gets really low set to 0. Adjust if needed for your lights. #}
            0
          {% elif new_brightness <= 10 %}
            {# If it's not quite 0, set to a minimum working brightness. #}
            10
          {% elif 91 <= new_brightness < (90 + step_size) %}
            {# If it's almost full brightness, set to 100%. #}
            100
          {% else %}
            {# Send actual calculated value. #}
            {{ new_brightness }}
          {% endif %}

cube_red_color_control:
  description: Control the red part of the color
  fields:
    angle:
      name: Angle to represent new brightness
      description:
        This is the new angle to be used in the calculation for Red Color
      required: true
      example: "120.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    light:
      name: Light entity to control
      description: Add the light entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
          domain: light
  sequence:
    - service: light.turn_on
      data_template:
        entity_id: "{{ light }}"
        rgb_color: >-
          {% set step_size = angle * 0.6 %}
              {# Use the 0.6 above to change the sensitivity of the action. #}
              {# create color variable #}
          {% set color = state_attr(light, 'rgb_color') %}
              {# create R (red) variable #}
            {% set R = color[0] %}
              {# create G (green) variable #}
            {% set G = color[1] %}
              {# create B (blue) variable #}
            {% set B = color[2] %}
              {# Increment red number based on cube movement #}
          {% set new_red = R + step_size | int(0) %}
          {% if new_red < 0 %}
            {# Make sure it doesn't go negative #}
            {{ 0, B, G }}
          {% elif new_red > 255 %}
            {# Make sure it doesn't go over 255 #}
            {{ 255, B, G }}
          {% else %}
            {# Send the value calculated #}
            {{ new_red, B, G }}
          {% endif %}


cube_green_color_control:
  description: Control the green part of the color
  fields:
    angle:
      name: Angle to represent new brightness
      description:
        This is the new angle to be used in the calculation for green color
      required: true
      example: "120.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    light:
      name: Light entity to control
      description: Add the light entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
          domain: light
  sequence:
    - service: light.turn_on
      data_template:
        entity_id: "{{ light }}"
        rgb_color: >-
          {% set step_size = angle * 0.6 %}
            {# Use the 0.6 above to change the sensitivity of the action. #}
            {# create color variable #}
          {% set color = state_attr(light, 'rgb_color') %}
            {# create R (red) variable #}
          {% set R = color[0] %}
            {# create G (green) variable #}
          {% set G = color[1] %}
            {# create B (blue) variable #}
          {% set B = color[2] %}
            {# Increment green number based on cube movement #}
          {% set new_green = G + step_size | int(0) %}
          {% if new_green < 0 %}
            {# Make sure it doesn't go negative #}
            {{ R, 0, B }}
          {% elif new_green > 255 %}
            {# Make sure it doesn't go over 255 #}
            {{ R, 255, B }}
          {% else %}
            {# Send the value calculated #}
            {{ R, new_green, B }}
          {% endif %}

cube_blue_color_control:
  description: Control the blue part of the color
  fields:
    angle:
      name: Angle to represent new brightness
      description:
        This is the new angle to be used in the calculation for blue color
      required: true
      example: "120.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    light:
      name: Light entity to control
      description: Add the light entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
          domain: light
  sequence:
    - service: light.turn_on
      data_template:
        entity_id: "{{ light }}"
        rgb_color: >-
          {% set step_size = angle * 0.6 %}
              {# Use the 0.6 above to change the sensitivity of the action. #}
              {# create color variable #}
          {% set color = state_attr(light, 'rgb_color') %}
              {# create R (red) variable #}
            {% set R = color[0] %}
              {# create G (green) variable #}
            {% set G = color[1] %}
              {# create B (blue) variable #}
            {% set B = color[2] %}
              {# Increment blue number based on cube movement #}
          {% set new_blue = B + step_size | int(0) %}
          {% if new_blue < 0 %}
            {# Make sure it doesn't go negative #}
            {{ R, G, 0 }}
          {% elif new_blue > 255 %}
            {# Make sure it doesn't go over 255 #}
            {{ R, G, 255 }}
          {% else %}
            {# Send the value calculated #}
            {{ R, G, new_blue }}
          {% endif %}

cube_short_cw_toggle:
  description: CW Short Press Toggle
  fields:
    angle:
      name: Angle to represent new switch function
      description:
        This is the new angle to be used in the calculation for switch function
      required: true
      example: "20.7"
      selector:
        number:
          min: 0
          max: 360
          step: 0.1
          mode: box
    entity:
      name: Entity to control
      description: Add the entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
  sequence:
    - condition: template
      value_template: '{{ angle > 0 <= 100 }}'
    - service: homeassistant.toggle
      target:
        entity_id: '{{ entity }}'
cube_long_cw_toggle:
  description: CW Long Press Toggle
  fields:
    angle:
      name: Angle to represent new switch function
      description:
        This is the new angle to be used in the calculation for switch function
      required: true
      example: "120.7"
      selector:
        number:
          min: 0
          max: 360
          step: 0.1
          mode: box
    entity:
      name: Entity to control
      description: Add the entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
  sequence:
    - condition: template
      value_template: '{{ angle > 100 }}'
    - service: homeassistant.toggle
      target:
        entity_id: '{{ entity }}'

cube_short_ccw_toggle:
  description: CCW Short Press Toggle
  fields:
    angle:
      name: Angle to represent new switch function
      description:
        This is the new angle to be used in the calculation for switch function
      required: true
      example: "-20.7"
      selector:
        number:
          min: -360
          max: 0
          step: 0.1
          mode: box
    entity:
      name: Entity to control
      description: Add the entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
  sequence:
    - condition: template
      value_template: '{{ angle < 0 >= -100 }}'
    - service: homeassistant.toggle
      target:
        entity_id: '{{ entity }}'
cube_long_ccw_toggle:
  description: CCW Long Press Toggle
  fields:
    angle:
      name: Angle to represent new switch function
      description:
        This is the new angle to be used in the calculation for switch function
      required: true
      example: "-120.7"
      selector:
        number:
          min: -360
          max: 0
          step: 0.1
          mode: box
    entity:
      name: Entity to control
      description: Add the entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
  sequence:
    - condition: template
      value_template: '{{ angle < -100 }}'
    - service: homeassistant.toggle
      target:
        entity_id: '{{ entity }}'


cube_long_short_toggle:
  description: CW Short Press Toggle
  fields:
    angle:
      name: Angle to represent switch function
      description: >-
        This is the angle to be used in the calculation for switch function
      required: true
      example: "20.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    short_entity:
      name: Entity to control with short rotation
      description: >-
        Add the entity you want to control here with a short rotation of cube.
        One of the long or the short entities are required but not both.
        If neither are provided it will error.
      required: false
      selector:
        entity:
          multiple: true
    long_entity:
      name: Entity to control with long rotation
      description: >-
        Add the entity you want to control here with a long rotation of the cube.
        One of the long or the short entities are required but not both.
        If neither are provided it will error.
      required: false
      selector:
        entity:
          multiple: true
  sequence:
    - choose:
      - conditions:
        - alias: "Pseudo short press with abs(angle) <= 100"
          condition: template
          value_template: "{{ abs(angle) <= 100 }}"
        sequence:
          - service: homeassistant.toggle
            target:
              entity_id: '{{ short_entity }}'
      default:
        - alias: "Pseudo long press with abs(angle) > 100"
          service: homeassistant.toggle
          target:
            entity_id: '{{ long_entity }}'
