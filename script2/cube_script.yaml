cube_dimmer_control:
  description: Template Dimmer Control
  fields:
    angle:
      name: Angle to represent new brightness
      description:
        This is the new angle to be used in the calculation for Brightness
      required: true
      example: "-120.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    light:
      name: Light entity to control
      description: Add the light entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
          domain: light
  sequence:
    - service: light.turn_on
      data:
        entity_id: "{{ light }}"
        brightness_pct: >-
          {% set step_size = angle * 0.4 %}
          {# Get brightness as a percent. #}
          {% set cb = (state_attr( light, 'brightness') | float(10) / 255.0) * 100.0 %}
          {% set new_brightness = cb | int(10) + step_size %}
          {% if new_brightness < 5 %}
            {# If it gets really low set to 0. Adjust if needed for your lights. #}
            0
          {% elif new_brightness <= 10 %}
            {# If it's not quite 0, set to a minimum working brightness. #}
            10
          {% elif 91 <= new_brightness < (90 + step_size) %}
            {# If it's almost full brightness, set to 100%. #}
            100
          {% else %}
            {# Send actual calculated value. #}
            {{ new_brightness }}
          {% endif %}

cube_long_short_toggle:
  description: CW Short Press Toggle
  fields:
    angle:
      name: Angle to represent switch function
      description: >-
        This is the angle to be used in the calculation for switch function
      required: true
      example: "20.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    short_entity:
      name: Entity to control with short rotation
      description: >-
        Add the entity you want to control here with a short rotation of cube.
        One of the long or the short entities are required but not both.
        If neither are provided it will error.
      required: false
      selector:
        entity:
          multiple: true
    long_entity:
      name: Entity to control with long rotation
      description: >-
        Add the entity you want to control here with a long rotation of the cube.
        One of the long or the short entities are required but not both.
        If neither are provided it will error.
      required: false
      selector:
        entity:
          multiple: true
  sequence:
    - choose:
      - conditions:
        - alias: "Pseudo short press with abs(angle) <= 100"
          condition: template
          value_template: "{{ abs(angle) <= 100 }}"
        sequence:
          - service: homeassistant.toggle
            target:
              entity_id: '{{ short_entity }}'
      default:
        - alias: "Pseudo long press with abs(angle) > 100"
          service: homeassistant.toggle
          target:
            entity_id: '{{ long_entity }}'


cube_color_control:
  description: "Control red, green, or blue on a light using the cube"
  fields:
    angle:
      name: Angle to represent new brightness
      description:
        This is the new angle to be used in the calculation for blue color
      required: true
      example: "120.7"
      selector:
        number:
          min: -360
          max: 360
          step: 0.1
          mode: box
    light:
      name: Light entity to control
      description: Add the light entity you want to control here
      required: true
      selector:
        entity:
          multiple: false
          domain: light
    t_color:
      name: Target Color
      description:
        Pixk the  Red, Green, or Blue as the color you want to tweak.
      required: false
      selector:
        select:
          options:
            - red
            - green
            - blue
    sensi:
      name: Sensitivity of the cube rotational motion.
      description: >-
        This sets how 'fast' the changes happen compared to how far you move
        the cube.
        Higher percentage is faster, lower is slower.
        I have found that 60% is a good number, but you can adjust as desired.
      required: false
      example: 60
      # unit_of_measurement: "%"
      selector:
        number:
          min: 1
          max: 200
          step: 1
          mode: box
  variables:
    sensi: 60
      # Convert raw percentage to decimal for calculations. Default to 0.6.
    sens_d: "{{ sensi / 100 | default( 0.6 ) }}"
      # Set step size based on sensitivity input
    step_size: "{{ angle * sens_d }}"
      # Create color variable from our light info
    color: "{{ state_attr(light, 'rgb_color') }}"
      # Create color variable s
    R: "{{ color[0] }}"
    G: "{{ color[1] }}"
    B: "{{ color[2] }}"
      # Set new step sizes
    new_red: "{{ R + step_size | int(0) }}"
    new_green: "{{ G + step_size | int(0) }}"
    new_blue: "{{ B + step_size | int(0) }}"
  sequence:
    - choose:
      - conditions:
        - alias: Red Light processing
          condition: template
          value_template: "{{ t_color == 'red' }}"
        sequence:
          - service: light.turn_on
            data:
              rgb_color: >-
                {% if new_red < 0 %}
                  {# Make sure it doesn't go negative #}
                  {{ 0, B, G }}
                {% elif new_red > 255 %}
                  {# Make sure it doesn't go over 255 #}
                  {{ 255, B, G }}
                {% else %}
                  {# Send the value calculated #}
                  {{ new_red, B, G }}
                {% endif %}
            target:
              entity_id: "{{ light }}"
      - conditions:
        - alias: Green Light processing
          condition: template
          value_template: "{{ t_color == 'green' }}"
        sequence:
          - service: light.turn_on
            data:
              rgb_color: >-
                {% if new_green < 0 %}
                  {# Make sure it doesn't go negative #}
                  {{ R, 0, B }}
                {% elif new_green > 255 %}
                  {# Make sure it doesn't go over 255 #}
                  {{ R, 255, B }}
                {% else %}
                  {# Send the value calculated #}
                  {{ R, new_green, B }}
                {% endif %}
            target:
              entity_id: "{{ light }}"
      - conditions:
        - alias: Blue Light processing
          condition: template
          value_template: "{{ t_color == 'blue' }}"
        sequence:
          - service: light.turn_on
            data:
              rgb_color: >-
                {% if new_blue < 0 %}
                  {# Make sure it doesn't go negative #}
                  {{ R, G, 0 }}
                {% elif new_blue > 255 %}
                  {# Make sure it doesn't go over 255 #}
                  {{ R, G, 255 }}
                {% else %}
                  {# Send the value calculated #}
                  {{ R, G, new_blue }}
                {% endif %}
            target:
              entity_id: "{{ light }}"























# cube_red_color_control:
#   description: Control the red part of the color
#   fields:
#     angle:
#       name: Angle to represent new brightness
#       description:
#         This is the new angle to be used in the calculation for Red Color
#       required: true
#       example: "120.7"
#       selector:
#         number:
#           min: -360
#           max: 360
#           step: 0.1
#           mode: box
#     light:
#       name: Light entity to control
#       description: Add the light entity you want to control here
#       required: true
#       selector:
#         entity:
#           multiple: false
#           domain: light
#   sequence:
#     - service: light.turn_on
#       data_template:
#         entity_id: "{{ light }}"
#         rgb_color: >-
#           {% set step_size = angle * 0.6 %}
#               {# Use the 0.6 above to change the sensitivity of the action. #}
#               {# create color variable #}
#           {% set color = state_attr(light, 'rgb_color') %}
#               {# create R (red) variable #}
#             {% set R = color[0] %}
#               {# create G (green) variable #}
#             {% set G = color[1] %}
#               {# create B (blue) variable #}
#             {% set B = color[2] %}
#               {# Increment red number based on cube movement #}
#           {% set new_red = R + step_size | int(0) %}
#           {% if new_red < 0 %}
#             {# Make sure it doesn't go negative #}
#             {{ 0, B, G }}
#           {% elif new_red > 255 %}
#             {# Make sure it doesn't go over 255 #}
#             {{ 255, B, G }}
#           {% else %}
#             {# Send the value calculated #}
#             {{ new_red, B, G }}
#           {% endif %}


# cube_green_color_control:
#   description: Control the green part of the color
#   fields:
#     angle:
#       name: Angle to represent new brightness
#       description:
#         This is the new angle to be used in the calculation for green color
#       required: true
#       example: "120.7"
#       selector:
#         number:
#           min: -360
#           max: 360
#           step: 0.1
#           mode: box
#     light:
#       name: Light entity to control
#       description: Add the light entity you want to control here
#       required: true
#       selector:
#         entity:
#           multiple: false
#           domain: light
#   sequence:
#     - service: light.turn_on
#       data_template:
#         entity_id: "{{ light }}"
#         rgb_color: >-
#           {% set step_size = angle * 0.6 %}
#             {# Use the 0.6 above to change the sensitivity of the action. #}
#             {# create color variable #}
#           {% set color = state_attr(light, 'rgb_color') %}
#             {# create R (red) variable #}
#           {% set R = color[0] %}
#             {# create G (green) variable #}
#           {% set G = color[1] %}
#             {# create B (blue) variable #}
#           {% set B = color[2] %}
#             {# Increment green number based on cube movement #}
#           {% set new_green = G + step_size | int(0) %}
#           {% if new_green < 0 %}
#             {# Make sure it doesn't go negative #}
#             {{ R, 0, B }}
#           {% elif new_green > 255 %}
#             {# Make sure it doesn't go over 255 #}
#             {{ R, 255, B }}
#           {% else %}
#             {# Send the value calculated #}
#             {{ R, new_green, B }}
#           {% endif %}

# cube_blue_color_control:
#   description: Control the blue part of the color
#   fields:
#     angle:
#       name: Angle to represent new brightness
#       description:
#         This is the new angle to be used in the calculation for blue color
#       required: true
#       example: "120.7"
#       selector:
#         number:
#           min: -360
#           max: 360
#           step: 0.1
#           mode: box
#     light:
#       name: Light entity to control
#       description: Add the light entity you want to control here
#       required: true
#       selector:
#         entity:
#           multiple: false
#           domain: light
#   sequence:
#     - service: light.turn_on
#       data_template:
#         entity_id: "{{ light }}"
#         rgb_color: >-
#           {% set step_size = angle * 0.6 %}
#               {# Use the 0.6 above to change the sensitivity of the action. #}
#               {# create color variable #}
#           {% set color = state_attr(light, 'rgb_color') %}
#               {# create R (red) variable #}
#             {% set R = color[0] %}
#               {# create G (green) variable #}
#             {% set G = color[1] %}
#               {# create B (blue) variable #}
#             {% set B = color[2] %}
#               {# Increment blue number based on cube movement #}
#           {% set new_blue = B + step_size | int(0) %}
#           {% if new_blue < 0 %}
#             {# Make sure it doesn't go negative #}
#             {{ R, G, 0 }}
#           {% elif new_blue > 255 %}
#             {# Make sure it doesn't go over 255 #}
#             {{ R, G, 255 }}
#           {% else %}
#             {# Send the value calculated #}
#             {{ R, G, new_blue }}
#           {% endif %}
