blueprint:
  name: Zigbee2MQTT - ZemiSmart ZM-RM02 Controller - 2023-03-01
  author: SirGoodenough
  description: 'This Blueprint uses a Zigbee2MQTT built sensor to sort out the 18
    commands from the ZemiSmart ZM-RM02 Remote. 

    The split out of functions gives you the ability to assign local scripts or 
    functions to do the things you want the remote to do. Functions that are left 
    empty will simply do nothing.


    There is sample code to make the template sensor in the help file on GitHib named
    [Zigbee2MQTT - ZemiSmart ZM-RM02 Controller.md](https://github.com/SirGoodenough/HA_Blueprints/blob/master/Automations/Zigbee2MQTT%20-%20ZemiSmart%20ZM-RM02%20Controller.md)
    & in the [community page related to this](https://community.home-assistant.io/t/zigbee2mqtt-zemismart-zm-rm02-controller/412650).


    Within this blueprint there is an event handler that will latch the last command
    that the blueprint finds and sends that to the event buss. From there a simple
    Template sensor can grab it and show you the last action sent. Thie will help  when
    setting up new functions and to troubleshoot strange behaviours.

    ðŸ“© There is not an official version control system for Blueprints. However I have
    found something that comes pretty close. It is not perfect, but for **MOST**
    Blueprints, it does just fine. I encourage you to check this script out and use
    it to easily check if I have updated this blueprint. ðŸ”— [koter84 Blueprint Update Script](https://github.com/koter84/HomeAssistant_Blueprints_Update/)


    [Community link for this blueprint](https://community.home-assistant.io/t/zigbee2mqtt-zemismart-zm-rm02-controller/412650)'
  source_url: https://github.com/SirGoodenough/HA_Blueprints/blob/master/Automations/Zigbee2MQTT-ZemiSmart_ZM-RM02_Controller.yaml
  domain: automation
  homeassistant:
    min_version: 2023.3.0
  input:
    remote:
      name: Remote
      description: 'The entity to put here is the sensor that Z2M imported that is
        named like this> 
        
        ```sensor.XXYour_HameXX_action```'
      selector:
        entity:
          integration: mqtt
          domain: sensor
          multiple: false
    tap_1:
      name: Single click on Button 1 action
      default: []
      selector:
        action: {}
    doubletap_1:
      name: Double click on Button 1 action
      default: []
      selector:
        action: {}
    hold_1:
      name: LongPress on Button 1 action
      default: []
      selector:
        action: {}
    tap_2:
      name: Single click on Button 2 action
      default: []
      selector:
        action: {}
    doubletap_2:
      name: Double click on Button 2 action
      default: []
      selector:
        action: {}
    hold_2:
      name: LongPress on Button 2 action
      default: []
      selector:
        action: {}
    tap_3:
      name: Single click on Button 3 action
      default: []
      selector:
        action: {}
    doubletap_3:
      name: Double click on Button 3 action
      default: []
      selector:
        action: {}
    hold_3:
      name: LongPress on Button 3 action
      default: []
      selector:
        action: {}
    tap_4:
      name: Single click on Button 4 action
      default: []
      selector:
        action: {}
    doubletap_4:
      name: Double click on Button 4 action
      default: []
      selector:
        action: {}
    hold_4:
      name: LongPress on Button 4 action
      default: []
      selector:
        action: {}
    tap_5:
      name: Single click on Button 5 action
      default: []
      selector:
        action: {}
    doubletap_5:
      name: Double click on Button 5 action
      default: []
      selector:
        action: {}
    hold_5:
      name: LongPress on Button 5 action
      default: []
      selector:
        action: {}
    tap_6:
      name: Single click on Button 6 action
      default: []
      selector:
        action: {}
    doubletap_6:
      name: Double click on Button 6 action
      default: []
      selector:
        action: {}
    hold_6:
      name: LongPress on Button 6 action
      default: []
      selector:
        action: {}
mode: queued
max: 2
trigger:
- platform: state
  entity_id: !input 'remote'
condition:
  condition: template
  value_template: '{{ trigger.to_state.attributes.action in ( ''button_1_single'',''button_2_single'',''button_3_single'',''button_4_single'',''button_5_single'',''button_6_single'',
    ''button_1_double'',''button_2_double'',''button_3_double'',''button_4_double'',''button_5_double'',''button_6_double'',
    ''button_1_hold'',''button_2_hold'',''button_3_hold'',''button_4_hold'',''button_5_hold'',''button_6_hold'')
    }}'
action:
- variables:
    event: '{{ trigger.to_state.attributes.action }}'
    entity_id: !input 'remote'
    friendly_name: '{{ trigger.to_state.attributes.friendly_name }}'
- alias: Fire Last Action event
  event: rm02_last_action
  event_data:
    event: '{{ event }}'
    entity_id: '{{ entity_id }}'
    friendly_name: '{{ friendly_name }}'
- alias: Button Events
  choose:
  - conditions: '{{ event == "button_1_single" }}'
    sequence: !input 'tap_1'
  - conditions: '{{ event == "button_1_double" }}'
    sequence: !input 'doubletap_1'
  - conditions: '{{ event == "button_1_hold" }}'
    sequence: !input 'hold_1'
  - conditions: '{{ event == "button_2_single" }}'
    sequence: !input 'tap_2'
  - conditions: '{{ event == "button_2_double" }}'
    sequence: !input 'doubletap_2'
  - conditions: '{{ event == "button_2_hold" }}'
    sequence: !input 'hold_2'
  - conditions: '{{ event == "button_3_single" }}'
    sequence: !input 'tap_3'
  - conditions: '{{ event == "button_3_double" }}'
    sequence: !input 'doubletap_3'
  - conditions: '{{ event == "button_3_hold" }}'
    sequence: !input 'hold_3'
  - conditions: '{{ event == "button_4_single" }}'
    sequence: !input 'tap_4'
  - conditions: '{{ event == "button_4_double" }}'
    sequence: !input 'doubletap_4'
  - conditions: '{{ event == "button_4_hold" }}'
    sequence: !input 'hold_4'
  - conditions: '{{ event == "button_5_single" }}'
    sequence: !input 'tap_5'
  - conditions: '{{ event == "button_5_double" }}'
    sequence: !input 'doubletap_5'
  - conditions: '{{ event == "button_5_hold" }}'
    sequence: !input 'hold_5'
  - conditions: '{{ event == "button_6_single" }}'
    sequence: !input 'tap_6'
  - conditions: '{{ event == "button_6_double" }}'
    sequence: !input 'doubletap_6'
  - conditions: '{{ event == "button_6_hold" }}'
    sequence: !input 'hold_6'
