blueprint:
  name: Keypad 5 button cypher to turn on something - 2024-06-08
  author: SirGoodenough
  description: >
    This will accept any 5 button presses or ```Binary Sensor``` detections and
    use them to preform an action. RE open a lock, or whatever.


    [Community link for this blueprint](https://community.home-assistant.io/t/keypad-cipher-code-for-5-button-presses-before-you-turn-on-an-input-boolean/322385)


    ## 🗿Notice👮🏿‍♂️:

    * Copies of the original Blueprint that were converted via the 'Take Control'
    feature or other means are officially not supported by me.


    * I may or may not be able to support you when you have a problem after you make changes
    to my code, as some of the code is no longer mine.


    * I & my license also require attribution as a link back to the original
    should you use this code in your own creation.


    * [Here is a link to my license & the original github post](https://github.com/SirGoodenough/HA_Blueprints?tab=License-1-ov-file)
    expected to be followed & referenced as attribution should you use this code elsewhere.

  source_url: https://github.com/SirGoodenough/HA_Blueprints/blob/master/Automations/keypad_5_button_cipher_to_turn_on_something.yaml
  domain: automation
  homeassistant:
    min_version: 2024.6.0
  input:
    required_inputs:
      name: Required input 👀
      icon: mdi:alert-box
      collapsed: false
      description: >
        These inputs are required for the blueprint to function and must be filled in.
      input:
        button_one:
          name: Button Press One
          description: '```Binary Sensor``` for First Button Pressed'
          selector:
            entity:
              filter:
                - domain: binary_sensor
              multiple: false
        button_two:
          name: Button Press Two
          description: '```Binary Sensor``` for Second Button Pressed'
          selector:
            entity:
              filter:
                - domain: binary_sensor
              multiple: false
        button_three:
          name: Button Press Three
          description: '```Binary Sensor``` for Third Button Pressed'
          selector:
            entity:
              filter:
                - domain: binary_sensor
              multiple: false
        button_four:
          name: Button Press Four
          description: '```Binary Sensor``` for Forth Button Pressed'
          selector:
            entity:
              filter:
                - domain: binary_sensor
              multiple: false
        button_five:
          name: Button Press Five
          description: '```Binary Sensor``` for Fifth Button Pressed'
          selector:
            entity:
              filter:
                - domain: binary_sensor
              multiple: false
        lock_control:
          name: Buffer for the Final Lock Enable
          description: '```input_boolean``` - Final Enable to trigger your lock or action'
          selector:
            entity:
              filter:
                - domain: input_boolean
              multiple: false
        seq_status:
          name: Control Sequence Status Placeholder
          description: >
            ```input_number``` - The internal use lock sequence number (set range
            to 0 to 100) You will need one of these for every copy of this automation,  IE
            one for every lock code.
          selector:
            entity:
              filter:
                - domain: input_number
              multiple: false

    required_inputs_with_defaults:
      name: Defaulted Input
      icon: mdi:alert-decagram
      collapsed: true
      description: >
        This input is required, but has a value that is defaulted to a value that worked for me.
          It is possible you will need to change it.
          My suggestion is to not change it until you detect an issue that you think can be
          fixed by changing this.

          In the end, this must have a value.
          This blueprint will work if no changes are made to this section.
      input:
        on_timer:
          name: Lock On Time in Seconds
          description: Time output signal is on in seconds. Generally 5 seconds is good
            here.
          default: 60
          selector:
            number:
              min: 5.0
              max: 360.0
              unit_of_measurement: seconds
              mode: slider
              step: 1.0

    optional_parameters:
      name: Optional parameters🤓
      icon: mdi:alert-octagon-outline
      collapsed: true
      description: >
        These inputs set optional parameters that allow you to customize the intended actions.
          Read the individual descriptions for more details.

          The Blueprint will work if no changes are made to this section.
      input:
        additional_conditions:
          name: Additional conditions
          description: |
            Extra conditions you may want to add to this automation 
            (Example: Home occupied, TV on, etc)
          default: []
          selector:
            condition:

trigger:
- platform: state
  entity_id: !input 'button_one'
  id: pad1
  from: 'off'
  to: 'on'
- platform: state
  entity_id: !input 'button_two'
  id: pad2
  from: 'off'
  to: 'on'
- platform: state
  entity_id: !input 'button_three'
  id: pad3
  from: 'off'
  to: 'on'
- platform: state
  entity_id: !input 'button_four'
  id: pad4
  from: 'off'
  to: 'on'
- platform: state
  entity_id: !input 'button_five'
  id: pad5
  from: 'off'
  to: 'on'

variables:
  seq_status_ent: !input 'seq_status'
  seq_status_last: '{{ expand(seq_status_ent)[0].last_changed | as_timestamp }}'
  seq_status_val: '{{ expand(seq_status_ent)[0].state }}'
  tnow: '{{ as_timestamp(now()) }}'

condition: !input additional_conditions

action:
- alias: Reset seq number to 99 if timeout occurred
  service: input_number.set_value
  data:
    entity_id: !input 'seq_status'
    value: >
      {% if seq_status_last < tnow - (5*60) %}
        {# It's been too long so reset the sequence #}
        99
      {% else %} 
        {# Timing is good, so accept the value set #}
        {{ seq_status_val }}
      {% endif %}
- choose:
  - alias: Somebody pushed the first button
    conditions:
    - condition: trigger
      id: pad1
    sequence:
    - alias: Set seq number to 1
      service: input_number.set_value
      data:
        entity_id: !input 'seq_status'
        value: 1
  - alias: Button 2 pushed in correct sequence number order
    conditions:
    - and:
      - condition: trigger
        id: pad2
      - condition: template
        value_template: '{{ is_state( seq_status_ent, ''1.0'') }}'
    sequence:
    - alias: Set seq number to 3
      service: input_number.set_value
      data:
        value: 3
      target:
        entity_id: !input 'seq_status'
  - alias: Button 3 pushed in correct sequence number order
    conditions:
    - and:
      - condition: trigger
        id: pad3
      - condition: template
        value_template: '{{ is_state( seq_status_ent, ''3.0'') }}'
    sequence:
    - alias: Set seq number to 7
      service: input_number.set_value
      data:
        value: 7
      target:
        entity_id: !input 'seq_status'
  - alias: Button 4 pushed in correct sequence number order
    conditions:
    - and:
      - condition: trigger
        id: pad4
      - condition: template
        value_template: '{{ is_state( seq_status_ent, ''7.0'') }}'
    sequence:
    - alias: Set seq number to 15
      service: input_number.set_value
      data:
        value: 15
      target:
        entity_id: !input 'seq_status'
  - alias: Button 5 pushed in correct sequence number order
    conditions:
    - and:
      - condition: trigger
        id: pad5
      - condition: template
        value_template: '{{ is_state( seq_status_ent, ''15.0'') }}'
    sequence:
    - alias: Set seq number to 31
      service: input_number.set_value
      data:
        value: 31
      target:
        entity_id: !input 'seq_status'
    - alias: Enable the Lock
      service: input_boolean.turn_on
      entity_id: !input 'lock_control'
    - alias: Leave the lock enabled for a time limit
      delay: !input 'on_timer'
    - alias: Disable the Lock normal
      service: input_boolean.turn_off
      entity_id: !input 'lock_control'
    - alias: Reset status number normal
      service: input_number.set_value
      data:
        value: 0
      target:
        entity_id: !input 'seq_status'
  default:
  - alias: Reset status number on fail code
    service: input_number.set_value
    data:
      value: 0
    target:
      entity_id: !input 'seq_status'
  - alias: Shut it down on fail code
    service: input_boolean.turn_off
    entity_id: !input 'lock_control'

mode: single
max_exceeded: silent
